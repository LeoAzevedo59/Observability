version: "3.9"

services:
  fidexa_api:
    env_file:
      - ./.env
    image: observability/api:v1
    container_name: fidexa_api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8081:443"
    volumes:
      - ./certificates:/app/certificates
      - ./temp-keys:/root/.aspnet/DataProtection-Keys
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=5003
      - Kestrel__Certificates__Default__Path=/app/certificates/certificate.pfx
      - Kestrel__Certificates__Default__Password=123
      - TZ="America/Sao_Paulo"
    networks:
      - docker_network

  prometheus:
    image: observability/prometheus:v1
    container_name: prometheus
    build:
      context: .
      dockerfile: Dockerfile-prometheus
    depends_on:
      - fidexa_api
    ports:
      - "9090:9090"
    volumes:
      - ./data/prometheus:/prometheus
    environment:
      - TZ="America/Sao_Paulo"
    networks:
      - docker_network
  
  loki:
    image: observability/loki:v1
    container_name: loki
    build:
      context: .
      dockerfile: Dockerfile-loki
    ports:
      - "3100:3100"
    volumes:
      - ./data/loki:/data/loki
      - ./loki-config.yaml:/etc/loki/local-config.yaml  # Adicione este volume
    command:
      - -config.file=/etc/loki/local-config.yaml
      - -print-config-stderr=true
      - -config.expand-env=true
    environment:
      - TZ="America/Sao_Paulo"
      - AZURE_STORAGE_CONTAINER_NAME=
      - AZURE_STORAGE_ACCOUNT=
      - AZURE_STORAGE_ACCOUNT_KEY=
    networks:
      - docker_network
  
  grafana:
    image: observability/grafana:v1
    container_name: grafana
    build:
      context: .
      dockerfile: Dockerfile-grafana
    depends_on:
      - prometheus
      - loki
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - docker_network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=leo123
      - TZ="America/Sao_Paulo"
  
networks:
  docker_network:
    driver: bridge